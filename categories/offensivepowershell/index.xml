<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OffensivePowerShell on Cyberstoph&#39;s blog</title>
    <link>https://cyberstoph.org/categories/offensivepowershell/</link>
    <description>Recent content in OffensivePowerShell on Cyberstoph&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 26 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cyberstoph.org/categories/offensivepowershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abusing Kerberos S4U2self for local privilege escalation</title>
      <link>https://cyberstoph.org/posts/2021/06/abusing-kerberos-s4u2self-for-local-privilege-escalation/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cyberstoph.org/posts/2021/06/abusing-kerberos-s4u2self-for-local-privilege-escalation/</guid>
      <description>TL;DR;
S4U2self can be abused for local privilege escalation (think: Network Service to Local Admin). This is not something new, it&amp;rsquo;s just the first time I actually ran through the steps myself so why not write a post about it. The attack is covered briefly in the Rubeus manual and in more detail in this post by Charlie Clark, which I recommend you read. I won&amp;rsquo;t explain S4U in this post so if you are not familiar with the topic, read this post on constrained delegation first.</description>
    </item>
    
    <item>
      <title>Fun with processes - Suspend and Resume</title>
      <link>https://cyberstoph.org/posts/2021/05/fun-with-processes-suspend-and-resume/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cyberstoph.org/posts/2021/05/fun-with-processes-suspend-and-resume/</guid>
      <description>Did you ever wonder how process suspension in Windows works? Nevermind, I&amp;rsquo;m writing this anyway.
Since you&amp;rsquo;re reading this blog you&amp;rsquo;re either totatlly lost or into Windows anyway. So I assume you alread tried suspending and resuming a process with process explorer for example. There are actually different ways to suspend a process and we&amp;rsquo;ll go with the one that&amp;rsquo;s officially undocumented (more fun).
NTSuspendProcess The API we&amp;rsquo;re using is called NTSuspendProcess and lives inside NTDLL.</description>
    </item>
    
    <item>
      <title>ConvertTo-Powershell - wrapping applications with PS</title>
      <link>https://cyberstoph.org/posts/2020/09/convertto-powershell-wrapping-applications-with-ps/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cyberstoph.org/posts/2020/09/convertto-powershell-wrapping-applications-with-ps/</guid>
      <description>TL;DR; The newest addition to PSArmoury is a small utility script called ConvertTo-Powershell. It allows to &amp;ldquo;convert&amp;rdquo; a C# console application into a powershell script or in other words it creates a .ps1 file from a .exe file. This can be useful for bypassing AWL or AV software and if you are a similar PS-lunatic like myself, it&amp;rsquo;s also just fun :-)
From exe to ps1 If you read one of my previous posts, you might already know that I prefer to do stuff in Powershell.</description>
    </item>
    
  </channel>
</rss>